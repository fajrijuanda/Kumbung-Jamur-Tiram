datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    password      String? // ðŸ”¹ Tambahkan field password
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now()) @updatedAt
    roles         Role[]
    accounts      Account[]
    sessions      Session[]
    kumbung       Kumbung[]
    Payment       Payment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Kumbung {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    userId      Int
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now()) @updatedAt
    Sensor      Sensor[]
    Payment     Payment[]
}

enum Role {
    ADMIN
    USER
}

model Sensor {
    id          Int          @id @default(autoincrement())
    name        String
    description String?
    location    String
    types       TypeSensor[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    kumbungId   Int
    kumbung     Kumbung      @relation(fields: [kumbungId], references: [id], onDelete: Cascade)
    data        Data[]
    actuator    Actuator[]
}

model Data {
    id        Int      @id @default(autoincrement())
    value     Float
    sensorId  Int
    sensor    Sensor   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

model Actuator {
    id         Int        @id @default(autoincrement())
    activities Activity[]
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    sensorId   Int
    sensor     Sensor     @relation(fields: [sensorId], references: [id], onDelete: Cascade)
}

enum Activity {
    ON
    OFF
    FADE_IN
    FADE_OUT
    BRIGHTNESS_UP
    BRIGHTNESS_DOWN
}

enum TypeSensor {
    AIR_TEMPERATURE
    MEDIA_TEMPERATURE
    AIR_HUMIDITY
    MEDIA_HUMIDITY
    CO2_LEVEL
    O2_LEVEL
    UV_INDEX
    PH
}

model Payment {
    id        Int             @id @default(autoincrement())
    userId    Int
    kumbungId Int
    amount    Float
    method    PaymentMethod[]
    status    PaymentStatus[]
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
    user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    kumbung   Kumbung         @relation(fields: [kumbungId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
    PENDING
    SUCCESS
    FAILED
}

enum PaymentMethod {
    CREDIT_CARD
    BANK_TRANSFER
    E_WALLET
}

model Subscription {
    id        Int                  @id @default(autoincrement())
    userId    String
    planId    Int
    status    SubscriptionStatus[]
    createdAt DateTime             @default(now())
    updatedAt DateTime             @updatedAt
    plan      Plan                 @relation(fields: [planId], references: [id], onDelete: Cascade)
}

enum SubscriptionStatus {
    ACTIVE
    INACTIVE
}

model Plan {
    id           Int            @id @default(autoincrement())
    name         String
    price        Float
    duration     DateTime
    Subscription Subscription[]
}
